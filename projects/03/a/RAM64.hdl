// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here: first 3 of address will be to select ram8 and second 3 will be to select register
    DMux8Way(in=load, sel=address[0..2], a=reg1Loader, b=reg2Loader, c=reg3Loader, d=reg4Loader, e=reg5Loader, f=reg6Loader, g=reg7Loader, h=reg8Loader);
    RAM8(in=in, load=reg1Loader, address=address[3..5], out=register1);
    RAM8(in=in, load=reg2Loader, address=address[3..5], out=register2);
    RAM8(in=in, load=reg3Loader, address=address[3..5], out=register3);
    RAM8(in=in, load=reg4Loader, address=address[3..5], out=register4);

    RAM8(in=in, load=reg5Loader, address=address[3..5], out=register5);
    RAM8(in=in, load=reg6Loader, address=address[3..5], out=register6);
    RAM8(in=in, load=reg7Loader, address=address[3..5], out=register7);
    RAM8(in=in, load=reg8Loader, address=address[3..5], out=register8);
    Mux8Way16(a=register1, b=register2, c=register3, d=register4, e=register5, f=register6, g=register7, h=register8, sel=address[0..2], out=out);
}
